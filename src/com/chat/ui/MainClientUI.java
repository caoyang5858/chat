/*
 * MainClientUI.java
 *
 * Created on __DATE__, __TIME__
 */

package com.chat.ui;

import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

import com.chat.bean.NodeInformation;
import com.chat.bean.RequestBean;
import com.chat.bean.UserBean;
import com.chat.client.ClientRecv;
import com.chat.tool.EnhancedTreeCellRenderer;
import com.chat.tool.SocketHelp;

/**
 *
 * @author  __USER__
 */
//再添加一个接受消息的 线程,接受客户端和服务器的  消息
public class MainClientUI extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/** Creates new form MainClientUI */
	private JLabel lbBackground;
	private JLabel lbLogo;
	private JLabel lbMyName;
	private String myName = "jack";
    private DefaultMutableTreeNode root;
    private DefaultMutableTreeNode friend;
    private DefaultMutableTreeNode stranger;
    private DefaultMutableTreeNode blacklist;
    
    public  ArrayList<UserBean> friendList;//好友列表
    public ClientChatUI[] chatUIs = new ClientChatUI[40];//这儿设置40个好友窗口,意思最多40个好友
    //用来维护聊天对话框的句柄
    //上面个两个 用的public  是为了 方便而已
    public GroupChatUI groupChatUI=null;
    private String serverIP="127.0.0.1";//
    private String serverPort="8005";
    private ServerSocket recvSocket;//现在这个 服务器socket暂用 8004端口,用来接受数据
    private int localPort;//增加这个可以不固定recvSocket为8004
	public MainClientUI(ArrayList<UserBean> list,String IP,String port) {
		this.friendList = list;
		this.serverIP = IP;
		this.serverPort = port;
		myInitSocket();
		initComponents();//初始化界面
		myInitFriendList();
		myInitTray();
		initListeners();
		
		ClientRecv recvThread = new ClientRecv(this,recvSocket);
		recvThread.receive();
		
		
		
	}
    
	//为了不固定端口增加
	public MainClientUI(ArrayList<UserBean> list,String IP,String port,int localPort) {
		this.friendList = list;
		this.serverIP = IP;
		this.serverPort = port;
		this.localPort = localPort;
		
		
		initComponents();//初始化界面
		myInitFriendList();
		myInitSocket();
		myInitTray();
		initListeners();
		
		ClientRecv recvThread = new ClientRecv(this,recvSocket);
		recvThread.receive();
	}
	
	public String getServerIP(){
		return this.serverIP;
	}
	
	public String getServerPort(){
		return this.serverPort;
	}
	
	public void myInitSocket(){
		try {
			//this.recvSocket = new ServerSocket(8004);
			this.recvSocket = new ServerSocket(localPort);
			//JOptionPane.showMessageDialog(null, ""+localPort);
		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, "mainCLietnUI_8004端口被占用");
		} 
	}
	public void myInitFriendList() {
		if(friendList!=null){
			for(int i=0;i<friendList.size();i++){
				UserBean userbean = friendList.get(i);
				friend.add(new DefaultMutableTreeNode(new NodeInformation(userbean.getLogo(), i, userbean.getUserName())));
				if(i==0){
					this.lbMyName.setText(userbean.getUserName());
					this.lbLogo.setIcon(new ImageIcon("src\\com\\chat\\logo\\"+userbean.getLogo()+".png"));
				}
			}
		}
		
	}
	
	public void removeFriendFromTree(int index){
		friend.remove(index);
		jTree1.updateUI();
		//JOptionPane.showMessageDialog(null, index+"removeTree");
	}
	
	public void addFriendFromTree(UserBean u,int i){
		
		friend.add(new DefaultMutableTreeNode(new NodeInformation(u.getLogo(), i, u.getUserName())));
	    jTree1.updateUI();
		//JOptionPane.showMessageDialog(null, u.getUserName()+"addTree");
	}

	
	public void btGroupAction(){
		if(this.groupChatUI!=null){
			
		}
		else{
			this.groupChatUI = new GroupChatUI(this, false, serverIP, serverPort);
			this.groupChatUI.setVisible(true);
		}
	}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	
	private void initListeners(){
		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				   onCloseWindow(e);
			}
			public void windowIconified(WindowEvent e){
				   hideFrame();	  
			}
		});
		
		
		jTree1.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				treeActionPerformed(e);
		     }
		});
		
		
		btGroup.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e) {
				btGroupAction();
			}
		  }
		);
	}
	private void initComponents() {
       
		root = new DefaultMutableTreeNode(new NodeInformation(20, -1, null));
	    friend = new DefaultMutableTreeNode(new NodeInformation(20, -1, "我的好友"));
	    stranger = new DefaultMutableTreeNode(new NodeInformation(20, -1, "陌生人"));
	    blacklist = new DefaultMutableTreeNode(new NodeInformation(20, -1, "黑名单"));
	    root.add(friend);
	    root.add(stranger);
	    root.add(blacklist);
	    stranger.add(new DefaultMutableTreeNode(new NodeInformation(1, -1, "stranger")));
	    blacklist.add(new DefaultMutableTreeNode(new NodeInformation(1, -1, "black")));
		jTree1 = new javax.swing.JTree(root);//构造树
		//jTree1.setEditable(true);
		jTree1.setCellRenderer(new EnhancedTreeCellRenderer());//树的节点显示
		jScrollPane1 = new javax.swing.JScrollPane(jTree1);//树加到panel
		//jTree1.setRowHeight(50);//树的每行高度
		jTree1.setFont(new java.awt.Font("新宋体", 0, 12));
		jTree1.setRootVisible(false);
		
        //jTree1.setOpaque(false);// 设置 JTree为透明
		jScrollPane1.setOpaque(false);   //设置 JScrossPanel背景透明
		jScrollPane1.getViewport().setOpaque(false);
		
		
		
		btGroup = new javax.swing.JButton();
		btGroup.setFont(new java.awt.Font("新宋体", 0, 12));
		btGroup.setForeground(new java.awt.Color(0, 51, 255));
		btGroup.setText("\u7fa4\u804a");
       
		
		
		setIconImage(new javax.swing.ImageIcon(
		"src\\com\\chat\\ui\\dog_left.png").getImage());
        setResizable(false);//取消最大化

        //右边显示
        int w = (Toolkit.getDefaultToolkit().getScreenSize().width)  -300;
        int h = (Toolkit.getDefaultToolkit().getScreenSize().height) / 9;
        setLocation(w, h);
		
        //setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        
		lbBackground = new JLabel();
		lbLogo = new JLabel();
		lbMyName = new JLabel();
		lbBackground.setIcon(new ImageIcon("src\\com\\chat\\ui\\bgmain.jpg"));
		lbLogo.setIcon(new ImageIcon("src\\com\\chat\\logo\\1.png"));
		lbMyName.setText(myName);
		lbLogo.setBounds(25, 10, 51, 51);
		lbMyName.setBounds(120, 20, 100, 20);
		lbMyName.setFont(new java.awt.Font("新宋体", 1, 15));
		lbMyName.setForeground(new java.awt.Color(0, 51, 255));
		lbBackground.setBounds(0, 0, 249, 480);
		lbBackground.add(this.btGroup);
		lbBackground.add(this.jScrollPane1);
		lbBackground.add(this.lbLogo);
		lbBackground.add(this.lbMyName);
		
		
		
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGap(
																				79,
																				79,
																				79)
																		.addComponent(
																				btGroup))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGap(
																				27,
																				27,
																				27)
																		.addComponent(
																				jScrollPane1,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				181,
																				javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addContainerGap(29, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				layout.createSequentialGroup().addContainerGap(74,
						Short.MAX_VALUE).addComponent(jScrollPane1,
						javax.swing.GroupLayout.PREFERRED_SIZE, 296,
						javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18,
						18).addComponent(btGroup).addGap(16, 16, 16)));
        getContentPane().add(lbBackground);
		pack();
	}// </editor-fold>
	
	public void hideFrame(){
	    this.repaint();
		this.setVisible(false);
		
		
	}
	public void showFrame(){
		int w = (Toolkit.getDefaultToolkit().getScreenSize().width)  -300;
        int h = (Toolkit.getDefaultToolkit().getScreenSize().height) / 9;
		this.setLocation(w, h);
		this.setVisible(true);
		this.setExtendedState(JFrame.NORMAL);
		this.toFront();
	}
	public void myInitTray(){
		if (SystemTray.isSupported()) { // 判断是否支持系统托盘   
		   
		    ImageIcon icon = new ImageIcon("src\\com\\chat\\ui\\tray.png"); // 实例化图像对象   
		    Image image = icon.getImage(); // 获得Image对象   
		    TrayIcon trayIcon = new TrayIcon(image); // 创建托盘图标   
		    trayIcon.addMouseListener(new MouseAdapter() { // 为托盘添加鼠标适配器   
		        public void mouseClicked(MouseEvent e) { // 鼠标事件   
		            if (e.getClickCount() == 2) { // 判断是否双击了鼠标   
		                showFrame(); // 调用方法显示窗体   
		            }  
		        }  
		    });  
		    trayIcon.setToolTip("系统托盘"); // 添加工具提示文本   
		    PopupMenu popupMenu = new PopupMenu(); // 创建弹出菜单   
		    MenuItem open = new MenuItem("打开面板");
		    MenuItem exit = new MenuItem("退出程序"); // 创建菜单项   
		    //响应方法   
		    open.addActionListener(new ActionListener() {  
		        public void actionPerformed(ActionEvent e) {  
		        	showFrame();     
		        }  
		      
		    });  
		    exit.addActionListener(new ActionListener() {  
		        public void actionPerformed(ActionEvent e) {  
		        	onCloseWindow(null);             
		        }  
		      
		    });  
		    
		    
		    popupMenu.add(open);
		    popupMenu.add(exit); // 为弹出菜单添加菜单项   
		    trayIcon.setPopupMenu(popupMenu); // 为托盘图标加弹出菜弹   
		    SystemTray systemTray = SystemTray.getSystemTray(); // 获得系统托盘对象   
		    try {  
		        systemTray.add(trayIcon); // 为系统托盘加托盘图标   
		    } catch (Exception e) {  
		        e.printStackTrace();  
		    }  
		              
		}  
		else{
			JOptionPane.showMessageDialog(null,"notray");
		}

	}
	public void onCloseWindow(WindowEvent we){
		    Socket socket=null ;
		  
			try {
				socket=new Socket(InetAddress.getByName(serverIP),Integer.valueOf(serverPort));
				SocketHelp socketHelp = new SocketHelp(socket);
		        RequestBean request = new RequestBean("exit",this.friendList.get(0), null, null);
				socketHelp.send(request);
			} catch (NumberFormatException e) {
				
				e.printStackTrace();
			} catch (UnknownHostException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			if(socket!=null){
				try {
					socket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			System.exit(0);
	}
	//GEN-END:initComponents
    public void treeActionPerformed(MouseEvent e){
    	int selRow = jTree1.getRowForLocation(e.getX(), e.getY());
        TreePath selPath = jTree1.getPathForLocation(e.getX(), e.getY());
        if(selRow != -1) {
            if(e.getClickCount() == 1) {
                if(jTree1.isExpanded(selRow)){
                	jTree1.collapseRow(selRow);//关闭
                }
                else{
                	jTree1.expandRow(selRow);//打开
                }
            }
            else if(e.getClickCount() == 2) {
            	//if打开了聊天窗口，do nothing
            	//else 
            	
            	DefaultMutableTreeNode node= (DefaultMutableTreeNode)selPath.getLastPathComponent();
           	    NodeInformation obj = (NodeInformation) node.getUserObject();
           	    int index=obj.getIndex();
           	    //通过index找到 对方信息,0就是自己，do nothing，开一个聊天窗口，传入 对方 信息
           	    if(index>0){
         	    	if(this.chatUIs[index]==null){
           	    		UserBean chatWith = this.friendList.get(index);

           	    		ClientChatUI dialog = new ClientChatUI(
           	    				this, false,chatWith,index);
           	    		this.chatUIs[index]=dialog;
           	    		dialog.setVisible(true);
           	    	}
   					
           	    }
            }
        }
    }
	/**
	 * @param args the command line arguments
	 */
    public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainClientUI(null,null, null).setVisible(true);
			}
		});
	}
	

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton btGroup;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTree jTree1;
	// End of variables declaration//GEN-END:variables

}